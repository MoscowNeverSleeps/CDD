import requests
import dash
import dash_bootstrap_components as dbc
from dash import dcc, html, dash_table
from dash.dependencies import Input, Output, State
import pandas as pd

API_KEY = "DVzlum5eSDKjelf2"
code_file = "code.txt"

indicator_names = {}
with open(code_file, encoding="utf-8") as f:
    for line in f:
        parts = line.strip().split("\t")
        if len(parts) == 2:
            code, name = parts
            indicator_names[code] = name

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–µ—Ç–ª—É—é Bootstrap-—Ç–µ–º—É (Flatly) –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞
app = dash.Dash(__name__, external_stylesheets=[dbc.themes.FLATLY], suppress_callback_exceptions=True)
server = app.server

app.layout = dbc.Container([
    html.H1("–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∫–∏ ‚Äî –ª–µ–≥–∫–æ", className="text-center my-4"),
    
    # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –ò–ù–ù + –∫–Ω–æ–ø–∫–∞
    dbc.InputGroup([
        dbc.InputGroupText("–í–≤–µ–¥–∏—Ç–µ –ò–ù–ù:"),
        dbc.Input(id="inn-input", type="text", placeholder="10 —Ü–∏—Ñ—Ä"),
        dbc.Button("–ó–∞–≥—Ä—É–∑–∏—Ç—å", id="load-button", n_clicks=0, color="primary")
    ], className="mb-4"),

    # –ö–∞—Ä—Ç–æ—á–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏
    html.Div(id="company-info"),
    dbc.Row([
        # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ ‚Äî –æ—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
        dbc.Col(
            dash_table.DataTable(
                id="finance-table",
                columns=[],
                data=[],
                fixed_columns={'headers': True, 'data': 1},  # üëà –∑–∞–∫—Ä–µ–ø–ª—è–µ–º –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü
                style_table={
                    "overflowX": "auto",
                    "minWidth": "100%",
                },
                style_cell={
                    "textAlign": "center",
                    "padding": "6px",
                    "fontFamily": "Arial, sans-serif",
                    "minWidth": "120px",
                    "width": "120px",
                    "maxWidth": "180px",
                    "whiteSpace": "normal"
                },
                style_cell_conditional=[
                    {"if": {"column_id": "–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å"}, "textAlign": "left", "width": "300px"}
                ],
                style_header={"backgroundColor": "#e1e1e1", "fontWeight": "bold"},
            )

            width=8,
            className="ps-2"  # –Ω–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø —Å–ª–µ–≤–∞
        ),
                # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ ‚Äî —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
        dbc.Col(
            html.Div(id="ratios-output"),
            width=4,
            className="pe-2"  # –Ω–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å—Ç—É–ø —Å–ø—Ä–∞–≤–∞
        )
    ], className="mt-4"),

    # –ü–æ–¥–ø–∏—Å—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ò–ù–ù
    html.Div(id="selected-inn", className="mt-3 text-center fw-bold")
], fluid=True)

@app.callback(
    Output("finance-table", "columns"),
    Output("finance-table", "data"),
    Output("company-info", "children"),
    Output("selected-inn", "children"),
    Output("ratios-output", "children"),
    Input("load-button", "n_clicks"),
    State("inn-input", "value")
)
def update_table(n_clicks, inn):
    if not inn:
        return [], [], "", "", ""
    url = f"https://api.checko.ru/v2/finances?key={API_KEY}&inn={inn}"
    response = requests.get(url)
    if response.status_code != 200:
        return [], [], "", f"–û—à–∏–±–∫–∞: {response.status_code}", ""
    data = response.json()
    if "data" not in data or not data["data"]:
        return [], [], "", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —ç—Ç–æ–º—É –ò–ù–ù.", ""

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ API –≤ DataFrame
    df = pd.DataFrame(data["data"]).fillna(0)
    df.reset_index(inplace=True)
    df.rename(columns={"index": "–ö–æ–¥"}, inplace=True)
    df["–ö–æ–¥"] = df["–ö–æ–¥"].astype(str)
    numeric_cols = [c for c in df.columns if c != "–ö–æ–¥"]
    df["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å"] = df["–ö–æ–¥"].apply(
        lambda x: f"{x}. {indicator_names.get(x, '')}" if x in indicator_names else None
    )
    df = df.dropna(subset=["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å"])
    df = df[["–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å"] + numeric_cols]

    # –†–∞—Å—á—ë—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
    vals = df.set_index("–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å").iloc[:, 1:].mean(axis=1).to_dict()
    def val(code):
        for k, v in vals.items():
            if k.startswith(code):
                return v
        return 0
    total_assets = val("1600")
    equity = val("1300")
    non_current = val("1100")
    current = val("1200")
    short_liab = val("1500")
    long_liab = val("1400")
    cash = val("1250")
    short_inv = val("1240")
    profit = val("2400")
    sales = val("2110")
    cost = val("2120")
    credit = val("1520")
    debit = val("1230")
    fixed_assets = val("1150")

    ratios = {
        "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–≤—Ç–æ–Ω–æ–º–∏–∏": equity / total_assets if total_assets else 0,
        "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ–±–µ—Å–ø–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ –°–û–°": (equity - non_current) / current if current else 0,
        "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–µ–∫—É—â–µ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏": current / short_liab if short_liab else 0,
        "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ–π –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏": (cash + short_inv) / short_liab if short_liab else 0,
        "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏": equity / total_assets if total_assets else 0,
        "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —Ä—ã—á–∞–≥–∞": (long_liab + short_liab) / equity if equity else 0,
        "–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–∞–∂": profit / sales if sales else 0,
        "–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –∞–∫—Ç–∏–≤–æ–≤": profit / total_assets if total_assets else 0,
        "–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –æ—Å–Ω. –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏": val("2200") / sales if sales else 0,
        "–î–µ–±–∏—Ç–æ—Ä—Å–∫–∞—è/–ö—Ä–µ–¥–∏—Ç–æ—Ä—Å–∫–∞—è –∑–∞–¥–æ–ª–∂.": debit / credit if credit else 0,
        "–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å –æ–±–æ—Ä–æ—Ç–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤": sales / current if current else 0,
        "–§–æ–Ω–¥–æ–æ—Ç–¥–∞—á–∞": sales / fixed_assets if fixed_assets else 0,
        "–ú–∞—Ç–µ—Ä–∏–∞–ª–æ–æ—Ç–¥–∞—á–∞": sales / cost if cost else 0,
    }
    Z = current - cash - short_inv - debit
    if Z < 0:
        Z = 0
    –°–û–° = equity - non_current
    –î–ò = –°–û–° + long_liab
    –û–ò = –î–ò + short_liab
    if –°–û–° > Z:
        stability = "–ê–±—Å–æ–ª—é—Ç–Ω–∞—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å"
    elif –î–ò > Z and –°–û–° < Z:
        stability = "–ù–æ—Ä–º–∞–ª—å–Ω–∞—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å"
    elif –û–ò > Z and –î–ò < Z:
        stability = "–ù–µ—É—Å—Ç–æ–π—á–∏–≤–∞—è (–ø—Ä–µ–¥–∫—Ä–∏–∑–∏—Å–Ω–∞—è)"
    else:
        stability = "–ö—Ä–∏–∑–∏—Å–Ω–∞—è"
    ratios["–¢–∏–ø —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏"] = stability

    # –ö–∞—Ä—Ç–æ—á–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–º–ø–∞–Ω–∏–∏
    company = data.get("company", {})
    company_card = dbc.Card(
        [
            dbc.CardHeader(html.H4(company.get("–ù–∞–∏–º–ü–æ–ª–Ω", ""), className="mb-0")),
            dbc.CardBody([
                html.P(f"–ò–ù–ù: {company.get('–ò–ù–ù', '')}"),
                html.P(f"–û–ì–†–ù: {company.get('–û–ì–†–ù', '')}"),
                html.P(f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {company.get('–î–∞—Ç–∞–†–µ–≥', '')}"),
                html.P(f"–°—Ç–∞—Ç—É—Å: {company.get('–°—Ç–∞—Ç—É—Å', '')}"),
                html.P(f"–ê–¥—Ä–µ—Å: {company.get('–Æ—Ä–ê–¥—Ä–µ—Å', '')}")
            ])
        ], className="mb-4"
    )

    # –¢–∞–±–ª–∏—Ü–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
    rows = []
    for k, v in ratios.items():
        rows.append(html.Tr([html.Td(k), html.Td(f"{v:.2f}" if isinstance(v, (int, float)) else v)]))
    ratios_table = dbc.Table(
        [html.Thead(html.Tr([html.Th("–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å"), html.Th("–ó–Ω–∞—á–µ–Ω–∏–µ")]))] +
        [html.Tbody(rows)],
        bordered=True, striped=True
    )
    ratios_card = dbc.Card(
        [
            dbc.CardHeader(html.H3(
                "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏",
                className="text-center mb-0"
            )),
            dbc.CardBody(ratios_table)
        ], className="mb-4"
    )

    columns = [{"name": col, "id": col} for col in df.columns]
    data_records = df.to_dict("records")
    selected = html.P(f"–í—ã–±—Ä–∞–Ω –ò–ù–ù: {inn}", className="fw-bold text-center")
    return columns, data_records, [company_card], [selected], [ratios_card]

if __name__ == '__main__':
    app.run_server(debug=True)



